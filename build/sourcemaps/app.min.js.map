{"version":3,"sources":["app.js"],"names":["maskOptions","mask","document","querySelectorAll","length","forEach","item","IMask","body","header","querySelector","hero","lastScroll","window","scrollY","ticking","onScroll","currentScroll","classList","add","remove","addEventListener","requestAnimationFrame","home","slider","Swiper","slidesPerView","spaceBetween","navigation","nextEl","prevEl","mousewheel","enabled","forceToAxis","media","speed","pagination","el","type","renderCustom","swiper","current","total","spans","Array","from","_","i","join","autoplay","delay","disableOnInteraction","loop","tech","techBg","container","parseFloat","getComputedStyle","paddingLeft","clientHeight","marginBottom","paddingTop","gsap","to","width","height","marginLeft","borderRadius","ease","scrollTrigger","trigger","start","end","scrub","invalidateOnRefresh","onUpdate","self","content","progress","_contentShown","opacity","undefined","items","index","ScrollTrigger","create","onEnter","onEnterBack","wrapper","inner","list","radios","labels","tabs","isDesktop","innerWidth","scrollableDistance","listHeight","scrollHeight","visibleHeight","listWidth","scrollWidth","visibleWidth","clientWidth","scrollTriggerInstance","currentActiveIndex","updateActiveItem","listRect","getBoundingClientRect","newActiveIndex","minDistance","Infinity","listCenter","top","itemRect","itemCenter","bottom","distance","Math","abs","left","right","radio","checked","tab","style","innerHeight","label","targetScrollPosition","offsetTop","targetProgress","min","triggerStart","targetScrollY","scrollTo","behavior","offsetLeft","scrollPosition","scrollTop","pin","pinSpacing","reagents","partners","dots","dot","accordion","geography","linkSelector","contentSelector","openLinks","contents","openLink","j","contains","slideHide","slideShow","duration","offsetHeight","setTimeout","registerPlugin"],"mappings":"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","file":"../js/app.min.js","sourcesContent":["const maskOptions = {\n   mask: \"+{7} (000) 000-00-00\",\n   // lazy: false,  // make placeholder always visible\n   // placeholderChar: '0'     // defaults to '_'\n};\nif (document.querySelectorAll(\"[data-phone]\").length) {\n   document.querySelectorAll(\"[data-phone]\").forEach((item) => {\n      const mask = IMask(item, maskOptions);\n   });\n}\nconst body = document.body;\n\ngsap.registerPlugin(ScrollTrigger);\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n   home();\n   header();\n   if (window.innerWidth < 569) {\n      accordion(\".footer__subheader--accordion\", \".footer__spoiler\");\n   }\n});\n\nfunction header() {\n   const header = document.querySelector(\".header\");\n   if (!header) return;\n   const hero = document.querySelector(\".hero\");\n   let lastScroll = window.scrollY;\n   let ticking = false;\n\n   if (!hero) {\n      header.classList.add(\"white\");\n   }\n\n   function onScroll() {\n      const currentScroll = window.scrollY;\n      if (currentScroll > lastScroll) {\n         makeHidden();\n      } else {\n         makeWhite();\n      }\n      if (currentScroll === 0 && hero) {\n         makeTransparent();\n      }\n      lastScroll = currentScroll;\n      ticking = false;\n   }\n\n   function makeWhite() {\n      header.classList.remove(\"hidden\");\n      header.classList.add(\"white\");\n      document\n         .querySelectorAll(\".header__wrapper .btn--blur\")\n         .forEach((item) => {\n            item.classList.remove(\"btn--blur\");\n            item.classList.add(\"btn--grey-light\");\n         });\n      document\n         .querySelectorAll(\".header__wrapper .btn--transparent-white\")\n         .forEach((item) => {\n            item.classList.remove(\"btn--transparent-white\");\n            item.classList.add(\"btn--transparent-black\");\n         });\n   }\n   function makeTransparent() {\n      header.classList.remove(\"white\");\n      document\n         .querySelectorAll(\".header__wrapper .btn--grey-light\")\n         .forEach((item) => {\n            item.classList.remove(\"btn--grey-light\");\n            item.classList.add(\"btn--blur\");\n         });\n      document\n         .querySelectorAll(\".header__wrapper .btn--transparent-black\")\n         .forEach((item) => {\n            item.classList.remove(\"btn--transparent-black\");\n            item.classList.add(\"btn--transparent-white\");\n         });\n   }\n   function makeHidden() {\n      header.classList.add(\"hidden\");\n   }\n\n   window.addEventListener(\"scroll\", () => {\n      if (!ticking) {\n         window.requestAnimationFrame(onScroll);\n         ticking = true;\n      }\n   });\n}\n\nfunction home() {\n   function hero() {\n      const slider = document.querySelector(\".home-hero .swiper\");\n      if (!slider) return;\n      new Swiper(slider, {\n         slidesPerView: 1,\n         speed: 1500,\n         navigation: {\n            nextEl: \".home-hero__navigation .next\",\n            prevEl: \".home-hero__navigation .prev\",\n         },\n         mousewheel: {\n            enabled: true,\n            forceToAxis: true,\n         },\n         pagination: {\n            el: \".home-hero__pagination\",\n            type: \"custom\",\n            renderCustom: function (swiper, current, total) {\n               const spans = Array.from(\n                  { length: total },\n                  (_, i) =>\n                     `<span${\n                        i + 1 === current ? ' class=\"active\"' : \"\"\n                     }></span>`\n               ).join(\"\");\n               return `<p class=\"current\">${current}</p> <div>${spans}</div> <p class=\"total\">${total}</p>`;\n            },\n         },\n         autoplay: {\n            delay: 5000,\n            disableOnInteraction: false,\n         },\n         loop: true,\n      });\n   }\n   function tech() {\n      const tech = document.querySelector(\".home-tech__wrapper\");\n      const techBg = document.querySelector(\".home-tech__subimage\");\n      if (!tech || !techBg) return;\n\n      let container = parseFloat(\n         getComputedStyle(document.querySelector(\".container\")).paddingLeft\n      );\n\n      let marginTop =\n         document.querySelector(\".home-tech__main\").clientHeight +\n         parseFloat(\n            getComputedStyle(document.querySelector(\".home-tech__main\"))\n               .marginBottom\n         ) +\n         parseFloat(\n            getComputedStyle(document.querySelector(\".home-tech\")).paddingTop\n         );\n\n      gsap.to(techBg, {\n         width: \"100vw\",\n         height: \"100vh\",\n\n         marginLeft: -1 * container,\n         borderRadius: 0,\n         ease: \"none\",\n         scrollTrigger: {\n            trigger: tech,\n            start: `top 10%`,\n            end: () => `+=600px`,\n            scrub: 0.1,\n            invalidateOnRefresh: true,\n            // markers: true,\n            onUpdate: (self) => {\n               const content = tech.querySelector(\".home-tech__content\");\n               if (self.progress === 1) {\n                  if (!tech._contentShown) {\n                     tech._contentShown = true;\n                     gsap.to(content, {\n                        opacity: 1,\n                        ease: \"none\",\n                     });\n                  }\n               } else {\n                  if (tech._contentShown || tech._contentShown === undefined) {\n                     tech._contentShown = false;\n                     gsap.to(content, {\n                        opacity: 0,\n                        ease: \"none\",\n                     });\n                  }\n               }\n            },\n         },\n      });\n\n      const items = tech.querySelectorAll(\".home-tech__item\");\n      items.forEach((item, index) => {\n         ScrollTrigger.create({\n            trigger: tech,\n            start: `top+=${1200 + index * 350}px 50%`,\n            end: `top+=${1200 + (index + 1) * 350}px 50%`,\n            onEnter: () => {\n               items.forEach((el) => el.classList.remove(\"active\"));\n               item.classList.add(\"active\");\n            },\n            onEnterBack: () => {\n               items.forEach((el) => el.classList.remove(\"active\"));\n               item.classList.add(\"active\");\n            },\n         });\n      });\n   }\n   function reagents() {\n      const wrapper = document.querySelector(\".home-reagents__wrapper\");\n      const inner = document.querySelector(\".home-reagents__inner\");\n      const list = document.querySelector(\".home-reagents__list\");\n      const radios = document.querySelectorAll(\".home-reagents__radios input\");\n      const labels = document.querySelectorAll(\".home-reagents__radios label\");\n      const tabs = document.querySelectorAll(\".home-reagents [data-tab]\");\n      if (!wrapper || !inner || !list) return;\n\n      const isDesktop = window.innerWidth >= 1024;\n      let scrollableDistance;\n\n      if (isDesktop) {\n         const listHeight = list.scrollHeight;\n         const visibleHeight = list.clientHeight;\n         scrollableDistance = listHeight - visibleHeight;\n      } else {\n         const listWidth = list.scrollWidth;\n         const visibleWidth = list.clientWidth;\n         scrollableDistance = listWidth - visibleWidth;\n      }\n\n      let currentActiveIndex = -1;\n      let scrollTriggerInstance;\n\n      if (isDesktop) {\n         wrapper.style.height = scrollableDistance + window.innerHeight + \"px\";\n      }\n\n      labels.forEach((label, index) => {\n         label.addEventListener(\"click\", () => {\n            const items = list.querySelectorAll(\".home-reagent\");\n            if (items[index]) {\n               const isDesktopClick = window.innerWidth >= 1024;\n\n               if (isDesktopClick) {\n                  const targetScrollPosition = items[index].offsetTop - 100;\n                  const targetProgress = Math.min(\n                     targetScrollPosition / scrollableDistance,\n                     1\n                  );\n\n                  const triggerStart = scrollTriggerInstance.start;\n                  const triggerEnd = scrollTriggerInstance.end;\n                  const targetScrollY =\n                     triggerStart +\n                     targetProgress * (triggerEnd - triggerStart);\n\n                  window.scrollTo({\n                     top: targetScrollY,\n                     behavior: \"smooth\",\n                  });\n               } else {\n                  list.scrollTo({\n                     left: items[index].offsetLeft,\n                     behavior: \"smooth\",\n                  });\n               }\n\n               currentActiveIndex = index;\n               radios.forEach((radio) => {\n                  radio.checked = false;\n               });\n               radios[index].checked = true;\n               tabs.forEach((tab) => {\n                  tab.classList.remove(\"active\");\n               });\n               tabs[index].classList.add(\"active\");\n            }\n         });\n      });\n\n      function updateActiveItem() {\n         const items = list.querySelectorAll(\".home-reagent\");\n         const listRect = list.getBoundingClientRect();\n\n         let newActiveIndex = -1;\n         let minDistance = Infinity;\n\n         if (isDesktop) {\n            const listCenter = listRect.top + listRect.height / 2;\n\n            items.forEach((item, index) => {\n               const itemRect = item.getBoundingClientRect();\n               const itemCenter = itemRect.top + itemRect.height / 2;\n\n               if (\n                  itemCenter >= listRect.top &&\n                  itemCenter <= listRect.bottom\n               ) {\n                  const distance = Math.abs(itemCenter - listCenter);\n                  if (distance < minDistance) {\n                     minDistance = distance;\n                     newActiveIndex = index;\n                  }\n               }\n            });\n         } else {\n            const listCenter = listRect.left + listRect.width / 2;\n\n            items.forEach((item, index) => {\n               const itemRect = item.getBoundingClientRect();\n               const itemCenter = itemRect.left + itemRect.width / 2;\n\n               if (\n                  itemCenter >= listRect.left &&\n                  itemCenter <= listRect.right\n               ) {\n                  const distance = Math.abs(itemCenter - listCenter);\n                  if (distance < minDistance) {\n                     minDistance = distance;\n                     newActiveIndex = index;\n                  }\n               }\n            });\n         }\n\n         if (newActiveIndex !== currentActiveIndex && newActiveIndex !== -1) {\n            currentActiveIndex = newActiveIndex;\n            radios.forEach((radio) => {\n               radio.checked = false;\n            });\n            radios[currentActiveIndex].checked = true;\n            tabs.forEach((tab) => {\n               tab.classList.remove(\"active\");\n            });\n            tabs[currentActiveIndex].classList.add(\"active\");\n         }\n      }\n\n      if (isDesktop) {\n         scrollTriggerInstance = ScrollTrigger.create({\n            trigger: wrapper,\n            start: \"top top\",\n            end: \"bottom bottom\",\n            onUpdate: (self) => {\n               const progress = self.progress;\n               const scrollPosition = scrollableDistance * progress;\n\n               list.scrollTop = scrollPosition;\n               updateActiveItem();\n            },\n            scrub: 0.1,\n            pin: inner,\n            pinSpacing: false,\n         });\n      } else {\n         list.addEventListener(\"scroll\", updateActiveItem);\n      }\n   }\n   function partners() {\n      const slider = document.querySelector(\".home-partners .swiper\");\n      if (!slider) return;\n      new Swiper(slider, {\n         slidesPerView: \"auto\",\n\n         spaceBetween: 16,\n         navigation: {\n            nextEl: \".home-partners__nav .next\",\n            prevEl: \".home-partners__nav .prev\",\n         },\n         mousewheel: {\n            enabled: true,\n            forceToAxis: true,\n         },\n      });\n   }\n   function media() {\n      const slider = document.querySelector(\".media-section .swiper\");\n      if (!slider) return;\n      new Swiper(slider, {\n         slidesPerView: \"auto\",\n         spaceBetween: 16,\n         navigation: {\n            nextEl: \".media-section__nav .next\",\n            prevEl: \".media-section__nav .prev\",\n         },\n         mousewheel: {\n            enabled: true,\n            forceToAxis: true,\n         },\n      });\n   }\n   function geography() {\n      const dots = document.querySelectorAll(\".home-geography__dot\");\n      if (!dots) return;\n      dots.forEach((dot) => {\n         dot.addEventListener(\"click\", () => {\n            dots.forEach((el) => el.classList.remove(\"active\"));\n            dot.classList.add(\"active\");\n         });\n      });\n\n      const slider = document.querySelector(\".home-geography__preview .swiper\");\n\n      new Swiper(slider, {\n         slidesPerView: 1,\n         spaceBetween: 28,\n         navigation: {\n            nextEl: \".home-geography__preview .next\",\n            prevEl: \".home-geography__preview .prev\",\n         },\n         mousewheel: {\n            enabled: true,\n            forceToAxis: true,\n         },\n         pagination: {\n            el: \".geo-preview__pagination\",\n            type: \"custom\",\n            renderCustom: function (swiper, current, total) {\n               return `<span>${current}</span>/<span>${total}</span>`;\n            },\n         },\n      });\n      accordion(\".geo-item__header\", \".geo-item__spoiler\");\n   }\n   media();\n   hero();\n   tech();\n   reagents();\n   partners();\n   geography();\n}\nfunction accordion(linkSelector, contentSelector) {\n   // получаем линки\n   const openLinks = document.querySelectorAll(`${linkSelector}`);\n   // контенты\n   const contents = document.querySelectorAll(`${contentSelector}`);\n   if (openLinks.length > 0) {\n      for (let i = 0; i < openLinks.length; i++) {\n         let openLink = openLinks[i];\n         openLink.addEventListener(\"click\", () => {\n            // все прячем\n            for (let j = 0; j < contents.length; j++) {\n               // если хоть один открывается - return\n               if (contents[j].classList.contains(\"collapsing\")) {\n                  return;\n               } // Иначе\n               // все прячем\n               slideHide(contents[j]);\n            }\n            for (let j = 0; j < openLinks.length; j++) {\n               openLinks[j].classList.remove(\"active\");\n            }\n            // записываем в переменную нужный таб\n            let content = contents[i];\n            // работаем с классами линка\n            if (content.classList.contains(\"collapsing\")) {\n               return;\n            } else if (content.classList.contains(\"collapse_show\")) {\n               openLink.classList.remove(\"active\");\n            } else {\n               openLink.classList.add(\"active\");\n            }\n            // показываем нужный\n            slideShow(content);\n         });\n      }\n   }\n}\n\nfunction slideShow(el, duration = 500) {\n   // завершаем работу метода, если элемент содержит класс collapsing или collapse_show\n   if (\n      el.classList.contains(\"collapsing\") ||\n      el.classList.contains(\"collapse_show\")\n   ) {\n      return;\n   }\n   // удаляем класс collapse\n   el.classList.remove(\"collapse\");\n   // сохраняем текущую высоту элемента в константу height (это значение понадобится ниже)\n   const height = el.offsetHeight;\n   // устанавливаем высоте значение 0\n   el.style[\"height\"] = 0;\n   // не отображаем содержимое элемента, выходящее за его пределы\n   el.style[\"overflow\"] = \"hidden\";\n   // создание анимации скольжения с помощью CSS свойства transition\n   el.style[\"transition\"] = `height ${duration}ms ease`;\n   // добавляем класс collapsing\n   el.classList.add(\"collapsing\");\n   // получим значение высоты (нам этого необходимо для того, чтобы просто заставить браузер выполнить перерасчет макета, т.к. он не сможет нам вернуть правильное значение высоты, если не сделает это)\n   el.offsetHeight;\n   // установим в качестве значения высоты значение, которое мы сохранили в константу height\n   el.style[\"height\"] = `${height}px`;\n   // по истечении времени анимации this._duration\n   window.setTimeout(() => {\n      // удалим класс collapsing\n      el.classList.remove(\"collapsing\");\n      // добавим классы collapse и collapse_show\n      el.classList.add(\"collapse\");\n      el.classList.add(\"collapse_show\");\n      // удалим свойства height, transition и overflow\n      el.style[\"height\"] = \"\";\n      el.style[\"transition\"] = \"\";\n      el.style[\"overflow\"] = \"\";\n   }, duration);\n}\nfunction slideHide(el, duration = 500) {\n   // завершаем работу метода, если элемент содержит класс collapsing или collapse_show\n   if (\n      el.classList.contains(\"collapsing\") ||\n      !el.classList.contains(\"collapse_show\")\n   ) {\n      return;\n   }\n   // установим свойству height текущее значение высоты элемента\n   el.style[\"height\"] = `${el.offsetHeight}px`;\n   // получим значение высоты\n   el.offsetHeight;\n   // установим CSS свойству height значение 0\n   el.style[\"height\"] = 0;\n   // обрежем содержимое, выходящее за границы элемента\n   el.style[\"overflow\"] = \"hidden\";\n   // добавим CSS свойство transition для осуществления перехода длительностью this._duration\n   el.style[\"transition\"] = `height ${duration}ms ease`;\n   // удалим классы collapse и collapse_show\n   el.classList.remove(\"collapse\");\n   el.classList.remove(\"collapse_show\");\n   // добавим класс collapsing\n   el.classList.add(\"collapsing\");\n   // после завершения времени анимации\n   window.setTimeout(() => {\n      // удалим класс collapsing\n      el.classList.remove(\"collapsing\");\n      // добавим класс collapsing\n      el.classList.add(\"collapse\");\n      // удалим свойства height, transition и overflow\n      el.style[\"height\"] = \"\";\n      el.style[\"transition\"] = \"\";\n      el.style[\"overflow\"] = \"\";\n   }, duration);\n}\n"]}